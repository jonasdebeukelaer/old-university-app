from app import app, db, flask_login, login_manager
from app.models.User import User
from app.utils import password
from flask import request, abort, json, session

@login_manager.request_loader
def load_from_request(request):
    token = request.args.get("token")
    if token:
        return 


@login_manager.token_loader
def load_token(token):
    """
    Flask-Login token_loader callback. 
    The token_loader function asks this function to take the token that was 
    stored on the users computer process it to check if its valid and then 
    return a User Object if its valid or None if its not valid.
    """
 
    #The Token itself was generated by User.get_auth_token.  So it is up to 
    #us to known the format of the token data itself.  
 
    #The Token was encrypted using itsdangerous.URLSafeTimedSerializer which 
    #allows us to have a max_age on the token itself.  When the cookie is stored
    #on the users computer it also has a exipry date, but could be changed by
    #the user, so this feature allows us to enforce the exipry date of the token
    #server side and not rely on the users cookie to exipre. 
    #max_age = app.config["REMEMBER_COOKIE_DURATION"].total_seconds()
 
    #Decrypt the Security Token, data = [username, hashpass]
    #data = login_serializer.loads(token, max_age=max_age)


    data = token.split("=")
    print data
    #Find the User
    user = User.get(data[0])
 
    #Check Password and return user or None
    if user and data[1] == user.password:
        return user
    return None

@login_manager.user_loader
def load_user(user_id):
    console.log("USER ID: %s" % (user_id))
    return User.get(user_id)

login_manager.login_view = "app.login"


#-------------------------------temp
@app.route('/api/protected', methods=["GET"])
@flask_login.login_required
def protected():
    return 'Logged in as: ' + flask_login.current_user.email

@app.route("/api/user/create", methods=["POST"])
def createUser():
    try:
        newUser = User(request.get_json())
        db.session.add(newUser)
        db.session.commit()
        return json.jsonify({"userid": str(newUser.id)})
    except Exception, e:
        return json.jsonify({"errorMessage" : "Could not create user: %s" % (e)}), 500

@app.route("/api/user/<int:userId>", methods=["GET"])
def getUser(userId):
    user = User.query.filter_by(id=userId).first()
    if not user:
        return json.jsonify({"errorMessage" : "No matching user found"}), 422
    else:
        return json.jsonify(user.toDict())

@app.route("/api/user/<int:userId>/verify/<activationCode>", methods=["GET"])
def verifyUser(userId, activationCode):
    user = User.query.filter_by(id=userId).first()
    if not user:
        return json.jsonify({
                "verified" : False,
                "errorMessage" : "No matching user found"
                }), 422
    else:
        if user.verification == activationCode:
            user.verified = True
            try:
                db.session.commit()
                return json.jsonify({"verified" : True,
                                         "email": user.email})
            except e:
                return json.jsonify({
                    "verified" : False,
                    "errorMessage" : "Could not verify user"
                    }), 500
        else:
            return json.jsonify({
                    "verified": False,
                    "errorMessage": "Invalid activation code"
                    }), 403

@app.route("/api/user/<int:userId>/completeSignup", methods=["POST"])
def completeSignup(userId):
    user = User.query.filter_by(id=userId).first()
    if not user:
        return json.jsonify({
                "errorMessage" : "No matching user found"
                }), 422
    else:
        userInfo = request.get_json()
        user.forename = userInfo['forename']
        user.surname = userInfo['surname']
        user.password = userInfo['password']
        user.number = userInfo['number']
        try:
            db.session.commit()
            return json.jsonify(user.toDict())
        except Exception, e:
            return json.jsonify({
                "errorMessge" : "Could not complete signup",
                "error": e
                }), 500



@app.route('/api/login', methods=['POST'])
def login():
    if request.method == 'POST':
        data = request.get_json()
        email = data['email']
        pw = data['password'] 
        user = User.query.filter_by(email=email).first()

        if not user:
            return json.jsonify({
                "errorMessage" : "No such user"
                }), 422

        #if not password.checkPassword(user.password, pw):
        if not user.password == pw:
            return json.jsonify({
                "errorMessage" : "Incorrect password"
                }), 403

        flask_login.login_user(user)

        return getUser(user.id)

@app.route('/api/logout')
def logout():
    # remove the username from the session if it's there
    flask_login.logout_user()
    return redirect(url_for('index'))

@login_manager.unauthorized_handler
def unauthorized_handler():
    return 'Unauthorized'

